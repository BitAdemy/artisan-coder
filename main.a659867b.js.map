{"version":3,"sources":["src/1-name/index.ts","src/2-function/index.ts","src/3-data/index.ts","src/4-object/index.ts","src/artisan/index.ts","src/main.ts"],"names":[],"mappings":";AA4CA,aA5CA,SAAgB,EAAkB,GAChC,EAAU,QAAQ,GAClB,IAEA,EADe,KASf,EAAa,CAJW,MAMxB,EAD4B,KAI9B,SAAgB,IACP,OAAA,EAGT,SAAgB,IACP,MAAA,CAAE,WAAY,IAAK,WAAY,KAGxC,SAAgB,EAAc,GACrB,MAAA,CAAC,YAAc,EAAO,WAAY,UAAY,EAAO,YAG9D,SAAgB,IACP,MAAA,OAGT,SAAgB,IACP,MAAA,WAGT,SAAgB,IACP,MAAA,CAAC,OAAQ,WAAY,oBAAqB,cAAe,SAGlE,SAAS,EAAa,GACpB,EAAQ,QAAQ,GAElB,SAAgB,EAAe,GAC7B,QAAQ,IAAI,GADd,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA5CA,QAAA,kBAAA,EAiBA,QAAA,sBAAA,EAIA,QAAA,UAAA,EAIA,QAAA,cAAA,EAIA,QAAA,+BAAA,EAIA,QAAA,mCAAA,EAIA,QAAA,gCAAA,EAOA,QAAA,eAAA;;AC2BC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvED,IAAA,EAAA,QAAA,aAEA,SAAgB,EAAoB,GAClC,EAAU,QAAQ,EAAA,gBAGpB,SAAgB,IACR,IAGF,EAAU,sFAMP,OAHL,EAAO,EAAQ,GAEjB,EAAA,eAAe,IACR,EAGT,SAAgB,IAEP,OADW,EAIpB,SAAgB,IAEP,OADY,EAIrB,SAAgB,IAEP,OADuB,EAIhC,SAAgB,IAEP,OADwB,GAMjC,SAAS,EAAQ,GAKR,OADP,EAAO,EADP,EAAO,EADP,GADA,EAAO,EAAK,QAAQ,aAAc,KACtB,gBAMd,SAAS,EAAsB,GAKxB,IAJC,IAAA,EAAO,8BAGP,EAAM,EAAK,OACR,EAFK,EAEM,EAAI,EAAK,IAAK,CAC1B,IAAA,EAAqB,IAAI,OAAO,EAAK,OAAO,GAAI,KAChD,EALG,8BAKyB,OAAO,GACzC,EAAO,EAAK,QAAQ,EAAoB,GAEnC,OAAA,EAGT,SAAS,EAAsB,GAQtB,OAJP,EAAO,EACJ,QAJkB,eAII,IACtB,QAJyB,OAII,KAC7B,QAJoB,MAII,KAnE7B,QAAA,oBAAA,EAIA,QAAA,wBAAA,EAaA,QAAA,gBAAA,EAKA,QAAA,6BAAA,EAKA,QAAA,qBAAA,EAKA,QAAA,0BAAA;;AClCA,aAAA,SAAgB,EAAwB,IAAxC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA;;ACAA,aAAA,SAAgB,EAAkB,IAAlC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA;;ACAA,aAAA,SAAgB,EAAgB,EAAqB,GAC5C,MAAA,CAAC,kBAAmB,iBAD7B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA;;ACyBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzBA,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,gBACA,EAAA,QAAA,YACA,EAAA,QAAA,cACA,EAAA,QAAA,aAEA,SAAgB,IACP,OAAA,EAGT,SAAgB,IACP,OAAA,EAGT,SAAgB,IAQP,MAPsB,CAC3B,mCACA,oCACA,6BACA,8BACA,uCAKJ,SAAgB,EAAgB,GAC9B,QAAQ,IAAI,GACZ,EAAA,kBAAkB,GAClB,EAAA,oBAAoB,GACpB,EAAA,wBAAwB,GACxB,EAAA,kBAAkB,GACZ,IAAA,EAAa,CACjB,QAAQ,GAEV,QAAQ,IAAI,CAAE,WAAU,IAClB,IAAA,EAAU,EAAA,gBAAgB,EAAY,GAC5C,QAAQ,IAAI,GA9Bd,QAAA,cAAA,EAIA,QAAA,mBAAA,EAIA,QAAA,mBAAA,EAWA,QAAA,gBAAA","file":"main.a659867b.js","sourceRoot":"..","sourcesContent":["export function writeReadableCode(priciples: string[]): void {\r\n  priciples.forEach(printToConsole);\r\n  shouldUseAnStyleGuide();\r\n  const limits = getLimits();\r\n  enforceLimits(limits);\r\n  let grammarForVariables;\r\n  const isAFlagVariable = true;\r\n  if (isAFlagVariable) {\r\n    grammarForVariables = getGrammarKindForFlagVariableNames();\r\n  } else {\r\n    grammarForVariables = getGrammarKindForVariableNames();\r\n  }\r\n  printGrammar([grammarForVariables]);\r\n  const grammarForFunctions = getGrammarKindsForFunctionNames();\r\n  printGrammar(grammarForFunctions);\r\n}\r\n\r\nexport function shouldUseAnStyleGuide(): boolean {\r\n  return true;\r\n}\r\n\r\nexport function getLimits(): Limits {\r\n  return { lineLenght: 100, fileLength: 200 };\r\n}\r\n\r\nexport function enforceLimits(limits: Limits): string[] {\r\n  return ['Prettier:' + limits.lineLenght, 'EsLint:' + limits.fileLength];\r\n}\r\n\r\nexport function getGrammarKindForVariableNames(): string {\r\n  return 'noun';\r\n}\r\n\r\nexport function getGrammarKindForFlagVariableNames(): string {\r\n  return 'verbNoun';\r\n}\r\n\r\nexport function getGrammarKindsForFunctionNames(): string[] {\r\n  return ['verb', 'verbNoun', 'verbNounAdjective', 'verbAdverbe', 'verb*'];\r\n}\r\n\r\nfunction printGrammar(grammar: string[]): void {\r\n  grammar.forEach(printToConsole);\r\n}\r\nexport function printToConsole(message: string): void {\r\n  console.log(message);\r\n}\r\nexport type Limits = { lineLenght: number; fileLength: number };\r\n","import { printToConsole } from '../1-name';\r\n\r\nexport function writeSmallFunctions(priciples: string[]): void {\r\n  priciples.forEach(printToConsole);\r\n}\r\n\r\nexport function writeOneSentencePerLine(): boolean {\r\n  const year = '2020';\r\n  const category = 'Código limpio';\r\n  const title = 'Código artesano: limpia tu código con la artesanía del Software.';\r\n  let slug = `${year}-${category}-${title}`;\r\n  const isComplex = true;\r\n  if (isComplex) {\r\n    slug = getSlug(slug);\r\n  }\r\n  printToConsole(slug);\r\n  return true;\r\n}\r\n\r\nexport function getNestedBlocks(): number {\r\n  const MAX_DEPTH = 2;\r\n  return MAX_DEPTH;\r\n}\r\n\r\nexport function getLimitCyclomaticComplexity(): number {\r\n  const COMPLEXITY = 8;\r\n  return COMPLEXITY;\r\n}\r\n\r\nexport function getAbstractionLevels(): number {\r\n  const LEVELS_OF_ABSTRACTION = 1;\r\n  return LEVELS_OF_ABSTRACTION;\r\n}\r\n\r\nexport function getMaximumFunctionsLenght(): number {\r\n  const MAX_LINES_PER_FUNCTION = 20;\r\n  return MAX_LINES_PER_FUNCTION;\r\n}\r\n\r\n// ORIGINAL: https://gist.github.com/codeguy/6684588\r\n\r\nfunction getSlug(slug: string): string {\r\n  slug = slug.replace(/^\\s+|\\s+$/g, '');\r\n  slug = slug.toLowerCase();\r\n  slug = replaceNonCommonChars(slug);\r\n  slug = replaceUndesiredChars(slug);\r\n  return slug;\r\n}\r\n\r\nfunction replaceNonCommonChars(slug: string): string {\r\n  const from = 'àáäâèéëêìíïîòóöôùúüûñç·/,:;';\r\n  const to = 'aaaaeeeeiiiioooouuuunc-----';\r\n  const START = 0;\r\n  const END = from.length;\r\n  for (let i = START; i < END; i++) {\r\n    const nonCommonCharacter = new RegExp(from.charAt(i), 'g');\r\n    const similarCommonCharacter = to.charAt(i);\r\n    slug = slug.replace(nonCommonCharacter, similarCommonCharacter);\r\n  }\r\n  return slug;\r\n}\r\n\r\nfunction replaceUndesiredChars(slug: string): string {\r\n  const invalidChars = /[^a-z0-9 -]/g;\r\n  const multipleWhiteSpaces = /\\s+/g;\r\n  const multipleDashes = /-+/g;\r\n  slug = slug\r\n    .replace(invalidChars, '')\r\n    .replace(multipleWhiteSpaces, '-')\r\n    .replace(multipleDashes, '-');\r\n  return slug;\r\n}\r\n","export function avoidPrimitiveObsession(priciples: string[]) {}\r\n","export function writeShortModules(priciples: string[]) {}\r\n","export function becomeAnArtisan(priciples: string[], discipline: object) {\r\n  return [\"professionalism\", \"craftsmanship\"];\r\n}\r\n","import { writeReadableCode } from './1-name';\r\nimport { writeSmallFunctions } from './2-function';\r\nimport { avoidPrimitiveObsession } from './3-data';\r\nimport { writeShortModules } from './4-object';\r\nimport { becomeAnArtisan } from './artisan';\r\n\r\nexport function isMyCodeClean(): boolean {\r\n  return false;\r\n}\r\n\r\nexport function shouldICleanMyCode(): boolean {\r\n  return true;\r\n}\r\n\r\nexport function getCleanPrinciples(): string[] {\r\n  const principles: string[] = [\r\n    'Show intention and hide details.',\r\n    'Avoid globalization and coupling.',\r\n    'Separate responsibilities.',\r\n    \"Don't Repeat Yourself (DRY)\",\r\n    'Keep It Simple, (not) Stupid (KISS)',\r\n  ];\r\n  return principles;\r\n}\r\n\r\nexport function applyPrinciples(principles: string[]): void {\r\n  console.log(principles);\r\n  writeReadableCode(principles);\r\n  writeSmallFunctions(principles);\r\n  avoidPrimitiveObsession(principles);\r\n  writeShortModules(principles);\r\n  const discipline = {\r\n    values: true,\r\n  };\r\n  console.log({ discipline });\r\n  const artisan = becomeAnArtisan(principles, discipline);\r\n  console.log(artisan);\r\n}\r\n"]}