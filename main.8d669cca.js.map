{"version":3,"sources":["src/1-name/index.ts","src/2-function/index.ts","src/3-data/index.ts","src/4-object/index.ts","src/artisan/index.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.8d669cca.js","sourceRoot":"..","sourcesContent":["export function writeReadableCode(priciples: string[]): void {\n  priciples.forEach(printToConsole);\n  shouldUseAnStyleGuide();\n  const limits = getLimits();\n  enforceLimits(limits);\n  let grammarForVariables;\n  const isAFlagVariable = true;\n  if (isAFlagVariable) {\n    grammarForVariables = getGrammarKindForFlagVariableNames();\n  } else {\n    grammarForVariables = getGrammarKindForVariableNames();\n  }\n  printGrammar([grammarForVariables]);\n  const grammarForFunctions = getGrammarKindsForFunctionNames();\n  printGrammar(grammarForFunctions);\n}\n\nexport function shouldUseAnStyleGuide(): boolean {\n  return true;\n}\n\nexport function getLimits(): Limits {\n  return { lineLenght: 100, fileLength: 200 };\n}\n\nexport function enforceLimits(limits: Limits): string[] {\n  return ['Prettier:' + limits.lineLenght, 'EsLint:' + limits.fileLength];\n}\n\nexport function getGrammarKindForVariableNames(): string {\n  return 'noun';\n}\n\nexport function getGrammarKindForFlagVariableNames(): string {\n  return 'verbNoun';\n}\n\nexport function getGrammarKindsForFunctionNames(): string[] {\n  return ['verb', 'verbNoun', 'verbNounAdjective', 'verbAdverb', 'verb*'];\n}\n\nfunction printGrammar(grammar: string[]): void {\n  grammar.forEach(printToConsole);\n}\nexport function printToConsole(message: string): void {\n  console.log(message);\n}\nexport type Limits = { lineLenght: number; fileLength: number };\n","import { printToConsole } from '../1-name';\n\nexport function writeSmallFunctions(priciples: string[]): void {\n  priciples.forEach(printToConsole);\n}\n\nexport function writeOneSentencePerLine(): boolean {\n  const year = '2020';\n  const category = 'Código limpio';\n  const title =\n    'Código artesano: limpia tu código con la artesanía del Software.';\n  let slug = `${year}-${category}-${title}`;\n  const isComplex = true;\n  if (isComplex) {\n    slug = getSlug(slug);\n  }\n  printToConsole(slug);\n  return true;\n}\n\nexport function getNestedBlocks(): number {\n  const MAX_DEPTH = 2;\n  return MAX_DEPTH;\n}\n\nexport function getLimitCyclomaticComplexity(): number {\n  const COMPLEXITY = 8;\n  return COMPLEXITY;\n}\n\nexport function getAbstractionLevels(): number {\n  const LEVELS_OF_ABSTRACTION = 1;\n  return LEVELS_OF_ABSTRACTION;\n}\n\nexport function getMaximumFunctionsLenght(): number {\n  const MAX_LINES_PER_FUNCTION = 20;\n  return MAX_LINES_PER_FUNCTION;\n}\n\n// ORIGINAL: https://gist.github.com/codeguy/6684588\n\nfunction getSlug(slug: string): string {\n  slug = slug.replace(/^\\s+|\\s+$/g, '');\n  slug = slug.toLowerCase();\n  slug = replaceNonCommonChars(slug);\n  slug = replaceUndesiredChars(slug);\n  return slug;\n}\n\nfunction replaceNonCommonChars(slug: string): string {\n  const from = 'àáäâèéëêìíïîòóöôùúüûñç·/,:;';\n  const to = 'aaaaeeeeiiiioooouuuunc-----';\n  const START = 0;\n  const END = from.length;\n  for (let i = START; i < END; i++) {\n    const nonCommonCharacter = new RegExp(from.charAt(i), 'g');\n    const similarCommonCharacter = to.charAt(i);\n    slug = slug.replace(nonCommonCharacter, similarCommonCharacter);\n  }\n  return slug;\n}\n\nfunction replaceUndesiredChars(slug: string): string {\n  const invalidChars = /[^a-z0-9 -]/g;\n  const multipleWhiteSpaces = /\\s+/g;\n  const multipleDashes = /-+/g;\n  slug = slug\n    .replace(invalidChars, '')\n    .replace(multipleWhiteSpaces, '-')\n    .replace(multipleDashes, '-');\n  return slug;\n}\n","export function avoidPrimitiveObsession(principles: string[]): void {\n  const code = { isCLean: true, hasTests: true, principles };\n}\nexport function getNumberOfParams(): number {\n  const MAX_PARAMS = 2;\n  return MAX_PARAMS;\n}\n\nexport function shouldAvoidCondionals(): boolean {\n  return true;\n}\n","export function writeShortModules(principles: string[]): boolean {\n  const guard = Array.isArray(principles);\n  return guard;\n}\n\nexport function getRecomendations(): Recomendation {\n  const recomendations = {\n    cohesion: true,\n    coupling: false,\n  };\n  return recomendations;\n}\n\nexport class Solid {\n  doSingleResponsability(): Solid {\n    return this;\n  }\n  doOpenClose(): Solid {\n    return this;\n  }\n  doLiskovSubstitution(): Solid {\n    return this;\n  }\n  doInterfaceSegregation(): Solid {\n    return this;\n  }\n  doDependencyInversion(): Solid {\n    return this;\n  }\n}\n\ntype Recomendation = { cohesion: boolean; coupling: boolean };\n","export function becomeAnArtisan(\n  principles: string[],\n  discipline: Discipline\n): string[] {\n  let artisan: string[] = [...principles];\n  discipline.activities = activities;\n  artisan = [...artisan, ...discipline.values];\n  artisan = [...artisan, ...discipline.skills];\n  artisan = [...artisan, ...discipline.activities];\n  artisan = [...artisan, 'craftsmanship'];\n  return artisan;\n}\ntype Discipline = { values: string[]; skills: string[]; activities?: string[] };\n\nexport const activities = [\n  'Rename until reveal intention with names.',\n  'Extract instructions until your functions become simples.',\n  'Group primitive variables in data structures.',\n  'Apply SOLID principles until ensure that your systems have low coupling and high cohesion.',\n];\n","import { writeReadableCode } from './1-name';\nimport { writeSmallFunctions } from './2-function';\nimport { avoidPrimitiveObsession } from './3-data';\nimport { writeShortModules } from './4-object';\nimport { becomeAnArtisan } from './artisan';\n\nexport function isMyCodeClean(): boolean {\n  return false;\n}\n\nexport function shouldICleanMyCode(): boolean {\n  return true;\n}\n\nexport function getCleanPrinciples(): string[] {\n  const principles: string[] = [\n    'Show intention and hide details.',\n    'Avoid globalization and coupling.',\n    'Separate responsibilities.',\n    \"Don't Repeat Yourself (DRY)\",\n    'Keep It Simple, (not) Stupid (KISS)',\n  ];\n  return principles;\n}\n\nexport function applyPrinciples(principles: string[]): void {\n  writeReadableCode(principles);\n  writeSmallFunctions(principles);\n  avoidPrimitiveObsession(principles);\n  writeShortModules(principles);\n  const discipline = {\n    values: ['habits', 'professionalism'],\n    skills: ['technical', 'collaborative'],\n  };\n  const artisan = becomeAnArtisan(principles, discipline);\n  console.log(artisan);\n}\n"]}